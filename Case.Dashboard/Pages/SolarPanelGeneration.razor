@page "/SolarGeneration"

<PageTitle>Solar Generation</PageTitle>

@using Case.CoreFunctionality.Interfaces;
@using Case.CoreFunctionality.Models;
@inject ISolarPanelEfficiencyService solarService;

<h3>Electricity Generated By Solar Panels</h3>

@if (todaysGeneration == null || !todaysGeneration.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Time Of Day</th>
                <th scope="col">Generated Electricity</th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < 24; i++)
            {
                <tr>
                    <th>@GetTimeOnly(i)</th>
                    <th>@todaysGeneration.GetValueOrDefault(GetTimeOnly(i))</th>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Dictionary<TimeOnly, double>? todaysGeneration;

    private TimeOnly GetTimeOnly(int hour) => new TimeOnly(hour, 0);

    protected override async Task OnInitializedAsync()
    {
        todaysGeneration = await solarService.GetEfficiencyForTodayAsync();
    }
}
